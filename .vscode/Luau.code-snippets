{
	"Action Creator": {
		"body": [
			"local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")",
			"local Rodux = require(ReplicatedStorage.Packages.Rodux)",
			"",
			"return Rodux.makeActionCreator(\"${0:$TM_FILENAME_BASE}\", function(${1:value})",
			"\treturn {",
			"\t\t${1:value} = ${1:value},",
			"\t}",
			"end)",
			"",
		],

		"description": "Makes a new action.",
		"prefix": ["actioncreator"],
	},

	"Hook": {
		"body": [
			"local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")",
			"local Hook = require(ReplicatedStorage.Shared.Utility.Hook)",
			"local Roact = require(ReplicatedStorage.Packages.Roact)",
			"",
			"export type I${0:$TM_FILENAME_BASE}Props = {}",
			"",
			"local function ${0:$TM_FILENAME_BASE}(props: I${0:$TM_FILENAME_BASE}Props, hooks)",
			"\treturn Roact.createElement()",
			"end",
			"",
			"return Hook(${0:$TM_FILENAME_BASE}, {",
			"\tcomponentType = \"PureComponent\",",
			"\tname = \"${0:$TM_FILENAME_BASE}\",",
			"})",
			"",
		],

		"description": "Creates a new hooked component.",
		"prefix": ["hook", "hooked", "hookcomponent"],
	},

	"HookForRodux": {
		"body": [
			"local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")",
			"local Hook = require(ReplicatedStorage.Shared.Utility.Hook)",
			"local Roact = require(ReplicatedStorage.Packages.Roact)",
			"local RoduxHooks = require(ReplicatedStorage.Packages.RoduxHooks)",
			"",
			"export type I${0:$TM_FILENAME_BASE}Props = {}",
			"",
			"local function ${0:$TM_FILENAME_BASE}(props: I${0:$TM_FILENAME_BASE}Props, hooks)",
			"\tlocal dispatch = RoduxHooks.useDispatch(hooks)",
			"\tlocal ${1:propertyName} = RoduxHooks.useSelector(hooks, function(state)",
			"\t\treturn state.$1",
			"\tend)",
			"",
			"\treturn Roact.createElement()",
			"end",
			"",
			"return Hook(${0:$TM_FILENAME_BASE}, {",
			"\tcomponentType = \"PureComponent\",",
			"\tname = \"${0:$TM_FILENAME_BASE}\",",
			"})",
			"",
		],

		"description": "Creates a new hooked component that uses RoduxHooks.",
		"prefix": ["hookrodux", "roduxhook", "roduxhooked", "hookedrodux", "roduxhookcomponent", "hookroduxcomponent"],
	},

	"HookStory": {
		"body": [
			"local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")",
			"local ${1:ComponentName} = require(ReplicatedStorage.Shared.Components.$1)",
			"local Hook = require(ReplicatedStorage.Shared.Utility.Hook)",
			"local Roact = require(ReplicatedStorage.Packages.Roact)",
			"",
			"local $1Story = Hook(function(_, hooks)",
			"\treturn Roact.createElement($1, {})",
			"end, {",
			"\tcomponentType = \"PureComponent\",",
			"\tname = \"$1\",",
			"})",
			"",
			"return function(target)",
			"\tlocal tree = Roact.mount(Roact.createElement($1Story, {}), target, \"$1Story\")",
			"\treturn function()",
			"\t\tRoact.unmount(tree)",
			"\tend",
			"end",
			"",
		],

		"description": "Creates a new story using a hook.",
		"prefix": ["hookstory", "hoarcekathook", "hookhoarcekat", "hoarcekathookstory", "hookhoarcekatstory"],
	},

	"Story": {
		"body": [
			"local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")",
			"local ${1:ComponentName} = require(ReplicatedStorage.Shared.Components.$1)",
			"local Roact = require(ReplicatedStorage.Packages.Roact)",
			"local Store = require(ReplicatedStorage.Shared.Store)",
			"local StoreComponent = require(ReplicatedStorage.Shared.Components.StoreComponent)",
			"",
			"local function $1Story()",
			"\treturn Roact.createElement(StoreComponent, {",
			"\t\tStore = Store,",
			"\t}, {",
			"\t\t$1 = Roact.createElement($1, {}),",
			"\t})",
			"end",
			"",
			"return function(target)",
			"\tlocal tree = Roact.mount(Roact.createElement($1Story, {}), target, \"$1Story\")",
			"\treturn function()",
			"\t\tRoact.unmount(tree)",
			"\tend",
			"end",
			"",
		],

		"description": "Creates a new story for Hoarcekat.",
		"prefix": ["story", "hoarcekat", "hoarcekatstory"],
	},
}